    eqt = init_twitter(config.TWITTER_CONFIG)

    eqt.search_tweets_for_ticker('A')

    eqt.batch_search_tweets_for_tickers(['A', 'B'])

    eqt.write_tweets_to_file(filename='fake.csv')


Desired API (not how it works now...)
    How to use:
        >> import equitweet

        >> client = equitweet.init_twitter(twitter_config)

        >> tweets = client.search_tweets_for_ticker('A')
        >> tweets.write_to_file('a_tweets.csv')

        >> tweets = client.batch_search_tweets_for_tickers(['A', 'B'], filename='ab_tweets.csv')
        >> tweets.write_to_file('a_b_tweets.csv')

        >> db = equitweet.init_db(db_config)
        >> db.seed_tickers(tickers)
        >> db.seed_tweets(client)
        >> db.seed_prices()

    Future TODOs:
        >> Exploratory Data Analysis example
        >> Backtesting example
        >> Postgres example
        >> Luigi support
        >> Interactive Dashboard with Plotly.js Dash framework
        >> Pandas support

    Why use this?
        A fun and simple way to do some social media sentiment analysis on the fly or collect data over time



# DB WORK
def setUp(self):
    #  basedir = os.path.abspath(os.path.dirname(__file__))
    # 'sqlite:///' + os.path.join(basedir, 'data.sqlite')
    # db.create_all()
    pass

def tearDown(self):
    # db.session.remove()
    # db.drop_all()
    pass

# def test_init_db(self):
#     db = equitweet.init_db('f', 'a', 'k', 'e')
#     assert db


def insert_sql_for_tweets(tweets):
    pass